<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AccountManagement</name>
    </assembly>
    <members>
        <member name="M:AccountManagement.Controllers.v1.RolePermissionsController.GetRolePermissions(AccountManagement.Domain.RolePermissions.Dtos.RolePermissionParametersDto)">
             <summary>
             Gets a list of all RolePermissions.
             </summary>
             <response code="200">RolePermission list returned successfully.</response>
             <response code="400">RolePermission has missing/invalid values.</response>
             <response code="401">This request was not able to be authenticated.</response>
             <response code="403">The required permissions to access this resource were not present in the given request.</response>
             <response code="500">There was an error on the server while creating the RolePermission.</response>
             <remarks>
             Requests can be narrowed down with a variety of query string values:
             ## Query String Parameters
             - **PageNumber**: An integer value that designates the page of records that should be returned.
             - **PageSize**: An integer value that designates the number of records returned on the given page that you would like to return. This value is capped by the internal MaxPageSize.
             - **SortOrder**: A comma delimited ordered list of property names to sort by. Adding a `-` before the name switches to sorting descendingly.
             - **Filters**: A comma delimited list of fields to filter by formatted as `{Name}{Operator}{Value}` where
                 - {Name} is the name of a filterable property. You can also have multiple names (for OR logic) by enclosing them in brackets and using a pipe delimiter, eg. `(LikeCount|CommentCount)>10` asks if LikeCount or CommentCount is >10
                 - {Operator} is one of the Operators below
                 - {Value} is the value to use for filtering. You can also have multiple values (for OR logic) by using a pipe delimiter, eg.`Title@= new|hot` will return posts with titles that contain the text "new" or "hot"
            
                | Operator | Meaning                       | Operator  | Meaning                                      |
                | -------- | ----------------------------- | --------- | -------------------------------------------- |
                | `==`     | Equals                        |  `!@=`    | Does not Contains                            |
                | `!=`     | Not equals                    |  `!_=`    | Does not Starts with                         |
                | `>`      | Greater than                  |  `@=*`    | Case-insensitive string Contains             |
                | `&lt;`   | Less than                     |  `_=*`    | Case-insensitive string Starts with          |
                | `>=`     | Greater than or equal to      |  `==*`    | Case-insensitive string Equals               |
                | `&lt;=`  | Less than or equal to         |  `!=*`    | Case-insensitive string Not equals           |
                | `@=`     | Contains                      |  `!@=*`   | Case-insensitive string does not Contains    |
                | `_=`     | Starts with                   |  `!_=*`   | Case-insensitive string does not Starts with |
             </remarks>
        </member>
        <member name="M:AccountManagement.Controllers.v1.RolePermissionsController.GetRolePermission(System.Guid)">
            <summary>
            Gets a single RolePermission by ID.
            </summary>
            <response code="200">RolePermission record returned successfully.</response>
            <response code="400">RolePermission has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the RolePermission.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.RolePermissionsController.AddRolePermission(AccountManagement.Domain.RolePermissions.Dtos.RolePermissionForCreationDto)">
            <summary>
            Creates a new RolePermission record.
            </summary>
            <response code="201">RolePermission created.</response>
            <response code="400">RolePermission has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the RolePermission.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.RolePermissionsController.UpdateRolePermission(System.Guid,AccountManagement.Domain.RolePermissions.Dtos.RolePermissionForUpdateDto)">
            <summary>
            Updates an entire existing RolePermission.
            </summary>
            <response code="204">RolePermission updated.</response>
            <response code="400">RolePermission has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the RolePermission.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.RolePermissionsController.DeleteRolePermission(System.Guid)">
            <summary>
            Deletes an existing RolePermission record.
            </summary>
            <response code="204">RolePermission deleted.</response>
            <response code="400">RolePermission has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the RolePermission.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.RolesController.GetRoles">
            <summary>
            Gets a list of all available roles.
            </summary>
            <response code="200">List retrieved.</response>
            <response code="500">There was an error getting the list of roles.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UserAccountsController.GetUserAccounts(AccountManagement.Domain.UserAccounts.Dtos.UserAccountParametersDto)">
             <summary>
             Gets a list of all UserAccounts.
             </summary>
             <response code="200">UserAccount list returned successfully.</response>
             <response code="400">UserAccount has missing/invalid values.</response>
             <response code="401">This request was not able to be authenticated.</response>
             <response code="403">The required permissions to access this resource were not present in the given request.</response>
             <response code="500">There was an error on the server while creating the UserAccount.</response>
             <remarks>
             Requests can be narrowed down with a variety of query string values:
             ## Query String Parameters
             - **PageNumber**: An integer value that designates the page of records that should be returned.
             - **PageSize**: An integer value that designates the number of records returned on the given page that you would like to return. This value is capped by the internal MaxPageSize.
             - **SortOrder**: A comma delimited ordered list of property names to sort by. Adding a `-` before the name switches to sorting descendingly.
             - **Filters**: A comma delimited list of fields to filter by formatted as `{Name}{Operator}{Value}` where
                 - {Name} is the name of a filterable property. You can also have multiple names (for OR logic) by enclosing them in brackets and using a pipe delimiter, eg. `(LikeCount|CommentCount)>10` asks if LikeCount or CommentCount is >10
                 - {Operator} is one of the Operators below
                 - {Value} is the value to use for filtering. You can also have multiple values (for OR logic) by using a pipe delimiter, eg.`Title@= new|hot` will return posts with titles that contain the text "new" or "hot"
            
                | Operator | Meaning                       | Operator  | Meaning                                      |
                | -------- | ----------------------------- | --------- | -------------------------------------------- |
                | `==`     | Equals                        |  `!@=`    | Does not Contains                            |
                | `!=`     | Not equals                    |  `!_=`    | Does not Starts with                         |
                | `>`      | Greater than                  |  `@=*`    | Case-insensitive string Contains             |
                | `&lt;`   | Less than                     |  `_=*`    | Case-insensitive string Starts with          |
                | `>=`     | Greater than or equal to      |  `==*`    | Case-insensitive string Equals               |
                | `&lt;=`  | Less than or equal to         |  `!=*`    | Case-insensitive string Not equals           |
                | `@=`     | Contains                      |  `!@=*`   | Case-insensitive string does not Contains    |
                | `_=`     | Starts with                   |  `!_=*`   | Case-insensitive string does not Starts with |
             </remarks>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UserAccountsController.GetUserAccount(System.Guid)">
            <summary>
            Gets a single UserAccount by ID.
            </summary>
            <response code="200">UserAccount record returned successfully.</response>
            <response code="400">UserAccount has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the UserAccount.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UserAccountsController.AddUserAccount(AccountManagement.Domain.UserAccounts.Dtos.UserAccountForCreationDto)">
            <summary>
            Creates a new UserAccount record.
            </summary>
            <response code="201">UserAccount created.</response>
            <response code="400">UserAccount has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the UserAccount.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UserAccountsController.UpdateUserAccount(System.Guid,AccountManagement.Domain.UserAccounts.Dtos.UserAccountForUpdateDto)">
            <summary>
            Updates an entire existing UserAccount.
            </summary>
            <response code="204">UserAccount updated.</response>
            <response code="400">UserAccount has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the UserAccount.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UserAccountsController.DeleteUserAccount(System.Guid)">
            <summary>
            Deletes an existing UserAccount record.
            </summary>
            <response code="204">UserAccount deleted.</response>
            <response code="400">UserAccount has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the UserAccount.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.AddRole(System.Guid,System.String)">
            <summary>
            Adds a new role to a user.
            </summary>
            <response code="204">Role added.</response>
            <response code="400">Request has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while adding the role.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.RemoveRole(System.Guid,System.String)">
            <summary>
            Removes a role from a User
            </summary>
            <response code="204">Role removed.</response>
            <response code="400">Request has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while removing the UserRole.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.GetUsers(AccountManagement.Domain.Users.Dtos.UserParametersDto)">
             <summary>
             Gets a list of all Users.
             </summary>
             <response code="200">User list returned successfully.</response>
             <response code="400">User has missing/invalid values.</response>
             <response code="401">This request was not able to be authenticated.</response>
             <response code="403">The required permissions to access this resource were not present in the given request.</response>
             <response code="500">There was an error on the server while creating the User.</response>
             <remarks>
             Requests can be narrowed down with a variety of query string values:
             ## Query String Parameters
             - **PageNumber**: An integer value that designates the page of records that should be returned.
             - **PageSize**: An integer value that designates the number of records returned on the given page that you would like to return. This value is capped by the internal MaxPageSize.
             - **SortOrder**: A comma delimited ordered list of property names to sort by. Adding a `-` before the name switches to sorting descendingly.
             - **Filters**: A comma delimited list of fields to filter by formatted as `{Name}{Operator}{Value}` where
                 - {Name} is the name of a filterable property. You can also have multiple names (for OR logic) by enclosing them in brackets and using a pipe delimiter, eg. `(LikeCount|CommentCount)>10` asks if LikeCount or CommentCount is >10
                 - {Operator} is one of the Operators below
                 - {Value} is the value to use for filtering. You can also have multiple values (for OR logic) by using a pipe delimiter, eg.`Title@= new|hot` will return posts with titles that contain the text "new" or "hot"
            
                | Operator | Meaning                       | Operator  | Meaning                                      |
                | -------- | ----------------------------- | --------- | -------------------------------------------- |
                | `==`     | Equals                        |  `!@=`    | Does not Contains                            |
                | `!=`     | Not equals                    |  `!_=`    | Does not Starts with                         |
                | `>`      | Greater than                  |  `@=*`    | Case-insensitive string Contains             |
                | `&lt;`   | Less than                     |  `_=*`    | Case-insensitive string Starts with          |
                | `>=`     | Greater than or equal to      |  `==*`    | Case-insensitive string Equals               |
                | `&lt;=`  | Less than or equal to         |  `!=*`    | Case-insensitive string Not equals           |
                | `@=`     | Contains                      |  `!@=*`   | Case-insensitive string does not Contains    |
                | `_=`     | Starts with                   |  `!_=*`   | Case-insensitive string does not Starts with |
             </remarks>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.GetUser(System.Guid)">
            <summary>
            Gets a single User by ID.
            </summary>
            <response code="200">User record returned successfully.</response>
            <response code="400">User has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the User.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.AddUser(AccountManagement.Domain.Users.Dtos.UserForCreationDto)">
            <summary>
            Creates a new User record.
            </summary>
            <response code="201">User created.</response>
            <response code="400">User has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the User.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.UpdateUser(System.Guid,AccountManagement.Domain.Users.Dtos.UserForUpdateDto)">
            <summary>
            Updates an entire existing User.
            </summary>
            <response code="204">User updated.</response>
            <response code="400">User has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the User.</response>
        </member>
        <member name="M:AccountManagement.Controllers.v1.UsersController.DeleteUser(System.Guid)">
            <summary>
            Deletes an existing User record.
            </summary>
            <response code="204">User deleted.</response>
            <response code="400">User has missing/invalid values.</response>
            <response code="401">This request was not able to be authenticated.</response>
            <response code="403">The required permissions to access this resource were not present in the given request.</response>
            <response code="500">There was an error on the server while creating the User.</response>
        </member>
        <member name="M:AccountManagement.Databases.EntityConfigurations.RolePermissionConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{AccountManagement.Domain.RolePermissions.RolePermission})">
            <summary>
            The database configuration for RolePermissions. 
            </summary>
        </member>
        <member name="M:AccountManagement.Databases.EntityConfigurations.UserAccountConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{AccountManagement.Domain.UserAccounts.UserAccount})">
            <summary>
            The database configuration for UserAccounts. 
            </summary>
        </member>
        <member name="M:AccountManagement.Databases.EntityConfigurations.UserConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{AccountManagement.Domain.Users.User})">
            <summary>
            The database configuration for Users. 
            </summary>
        </member>
        <member name="M:AccountManagement.Databases.EntityConfigurations.UserRoleConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{AccountManagement.Domain.Users.UserRole})">
            <summary>
            The database configuration for UserRoles. 
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.Line1">
            <summary>
            Address line 1 (e.g., street, PO Box, or company name).
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.Line2">
            <summary>
            Address line 2 (e.g., apartment, suite, unit, or building).
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.City">
            <summary>
            City, district, suburb, town, or village.
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.State">
            <summary>
            State, county, province, or region.
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.PostalCode">
            <summary>
            ZIP or postal code.
            </summary>
        </member>
        <member name="P:AccountManagement.Domain.Addresses.Address.Country">
            <summary>
            Two-letter country code <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">(ISO 3166-1 alpha-2)</a>.
            </summary>
        </member>
        <member name="M:AccountManagement.Extensions.Services.WebAppServiceConfiguration.AddBoundaryServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Registers all services in the assembly of the given interface.
            </summary>
        </member>
    </members>
</doc>
